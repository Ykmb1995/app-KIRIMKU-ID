name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Lint (apps/api)
        run: |
          if [ -f apps/api/package.json ]; then npm run --prefix apps/api lint || true; fi

  build:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Build (apps/api)
        run: |
          if [ -f apps/api/package.json ]; then npm run --prefix apps/api build || true; fi

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests (apps/api)
        run: npm run --prefix apps/api test
      - name: Upload jest results (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: apps/api/jest-junit.xml

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image (apps/api) with retry + registry cache
        run: |
          set -e
          IMAGE=ghcr.io/${{ github.repository_owner }}/app-kirimku-id
          CACHE_REF=${IMAGE}:cache
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Build attempt $i/$MAX_RETRIES"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              --tag ${IMAGE}:latest \
              --tag ${IMAGE}:${{ github.sha }} \
              --cache-from type=registry,ref=${CACHE_REF} \
              --cache-to type=registry,ref=${CACHE_REF},mode=max \
              ./apps/api && break || true
            if [ "$i" -lt "$MAX_RETRIES" ]; then
              sleep_time=$((i * 10))
              echo "Build failed, retrying in ${sleep_time}s..."
              sleep ${sleep_time}
            else
              echo "Build failed after ${MAX_RETRIES} attempts"
              exit 1
            fi
          done
